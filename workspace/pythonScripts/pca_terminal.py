# -*- coding: utf-8 -*-
"""PCA_terminal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/116G3B9OHGgo95ICKdYx3DmcYfbccBl08
"""

import os
import sys
import pandas as pd
import numpy as np
import zipfile
#file 불러오기
filepath = sys.argv[1]
filename = sys.argv[2]
#filepath = "C:/Users/JIHYEON_KIM/Documents/workspace/rda/files/"
#filename = "input3.csv"

data = pd.read_csv(filepath + "/" + filename, encoding='UTF-8')
#모든 feature에 대해 결측치 갖는 샘플 제거
data_0 =data.dropna(axis=0,how='all')

#label 값이 결측치인 샘플 제거
data_l =data.loc[data["label"].notnull(), :]

#50%이상이 결측치인 feature 삭제
data_f =data_l.dropna(axis=1,thresh=data_l.shape[0]/2)

#나머지는 각 label에 대해서 median imputation 수행
data_na_remove = data_f.fillna(data_f.mean())

#data
table = data_na_remove.iloc[:,1:]
target = data_na_remove.iloc[:,0]

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
result = scaler.fit_transform(table)
data_scaled = pd.DataFrame(result, columns=table.columns)

from sklearn.decomposition import PCA

pca = PCA(n_components=2)
result = pca.fit_transform(data_scaled)
result = pd.DataFrame(result, columns=["x", "y"])

target = pd.DataFrame(target, columns=['label'])
merged = pd.concat([result, target], axis=1)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import matplotlib as mlp
import seaborn as sns

# %matplotlib inline

# font 정의
mlp.rcParams['font.size'] = 20
mlp.rcParams['font.family'] = 'Nanum Gothic'

# 시각화
plt.figure(figsize=(16, 9))
sns.set_palette(sns.color_palette("muted"))

sns.scatterplot(merged['x'],
                     merged['y'],
                     hue=merged['label'],
                     s=100,
                     palette=sns.color_palette('muted', n_colors=5),
                    )
plt.title('data plot')
plt.savefig('./public/files/pca_'+filename+'_.png')

import zipfile
os.chdir("./public/files/")
pcazip=zipfile.ZipFile('clustering_'+filename+'_.zip', 'a')
pcazip.write('pca_'+filename+'_.png')
pcazip.close()